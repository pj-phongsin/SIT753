pipeline {
    agent any
    
    environment {
        DIRECTORY_PATH = "/path/to/code/directory"
        TESTING_ENVIRONMENT = "PJ Testing ENV"
        STAGING_ENVIRONMENT = "PJ Staging ENV"
        PRODUCTION_ENVIRONMENT = "PJ Production- ENV"
        EMAIL_RECIPIENT = "chokforze@gmail.com"
    }

    stages {
        stage('Build') {
            steps {
                echo 'Build the code using a build automation tool.'
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Run unit tests to ensure the code functions as expected and run integration tests'
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Integrate a code analysis tool to analyse the code and ensure it meets industry standards.'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Perform a security scan on the code using a tool to identify any vulnerabilities.'
            }
            post {
                always {
                    script {
                        def status = currentBuild.currentResult
                        emailext (
                            to: "${env.EMAIL_RECIPIENT}",
                            SUBJECT: "Security Scan Build ${status}",
                            body: """Security scan completed with status: ${status}. And the build log attached.""",
                            attachLog: true
                        )
                    }
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Run integration tests on the staging environment to ensure the application functions as expected in a production-like environment'
                sleep 10
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'deploy the application to a production server'
            }
            post {
                always {
                    script {
                        def status = currentBuild.currentResult
                        emailext (
                            to: "${env.EMAIL_RECIPIENT}",
                            subject: "Deployment to Production Build ${status}",
                            body: """The deplowment to production completed with status: ${status} And the build log attached.""",
                            attachLog: true
                        )
                    }
                }
            }
        }
    }
}